import org.gradle.api.tasks.testing.logging.TestExceptionFormat

allprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'

    group 'org.deepboof'
    version '0.5.1-SNAPSHOT'
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    java {
        withJavadocJar()
        withSourcesJar()
        toolchain { languageVersion = JavaLanguageVersion.of(15) }
    }

    // Prevents tons of errors if someone is using ASCII
    tasks.withType(JavaCompile).configureEach { options.encoding = "UTF-8" }
    // Creates Java 8 byte code
    tasks.withType(JavaCompile).configureEach { options.release = 8 }

    repositories {
        mavenCentral()
        mavenLocal()

        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url = 'https://jitpack.io' } // Allows annotations past Java 8 to be used
    }

    dependencies {
        implementation group: 'org.ddogleg', name: 'ddogleg', version: '0.20-SNAPSHOT'

        compileOnly 'org.jetbrains:annotations:20.0.0' // @Nullable
        compileOnly 'javax.annotation:jsr250-api:1.0'  // @Generated
        compileOnly 'org.projectlombok:lombok:1.18.10'
        testCompile project.sourceSets.main.compileClasspath

        testImplementation( 'org.junit.jupiter:junit-jupiter-api:5.4.0')
        testRuntimeOnly( 'org.junit.jupiter:junit-jupiter-engine:5.4.0')

        // needed to use Java 11+ syntax with Java 1.8 byte code
        annotationProcessor('com.github.bsideup.jabel:jabel-javac-plugin:0.3.0')

        annotationProcessor("net.bytebuddy:byte-buddy:1.10.10")
        annotationProcessor("net.bytebuddy:byte-buddy-agent:1.10.10")
    }

    sourceSets {
        autogenerate { java { srcDir 'autogenerate/java' } }
    }

    test {
        useJUnitPlatform()
        reports.html.enabled = false
        // Make the error logging verbose to make debugging on CI easier
        testLogging.showStandardStreams = true
        testLogging.exceptionFormat TestExceptionFormat.FULL
        testLogging.showCauses true
        testLogging.showExceptions true
        testLogging.showStackTraces true
    }

    javadoc {
        configure(options) {
            failOnError = false
        }

        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    // Disable the creation of jars for distribution.  If you don't do this it will crash
//    if (['modules','examples'].contains(name)) {
//        project.jar.enabled = false
//        project.uploadArchives.enabled = false
//        project.tasks.publish.enabled = false
//    }

    if (!project.tasks.publish.enabled)
        return

    // if Maven central isn't setup in ~/.gradle/gradle.properties fill in these variables to make it happy
    if( !project.hasProperty('ossrhUsername') ) {
        ext.ossrhUsername = "dummy"
        ext.ossrhPassword = "dummy"
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                pom {
                    name = 'DeepBoof'
                    description = 'Trainer Agnostic Deep Learning'
                    url = 'https://boofcv.org'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'pabeles'
                            name = 'Peter Abeles'
                            email = 'peter.abeles@gmail.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/lessthanoptimal/DeepBoof.git'
                        developerConnection = 'scm:git:git://github.com/lessthanoptimal/DeepBoof.git'
                        url = 'https://github.com/lessthanoptimal/DeepBoof'
                    }
                }
            }
        }
        repositories {
            maven {
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
    }

    if (ext.ossrhPassword != "dummy") {
        signing { sign publishing.publications.mavenJava }
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.BIN
    gradleVersion = '6.8.3'
}
