allprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'

    group 'org.deepboof'
    version '0.5'
}


subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven'
    apply plugin: 'signing'

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    // Creates Java 8 byte code
    compileJava {
        options.compilerArgs = [ "--release", "8" ]
    }

    repositories {
        mavenCentral()
        mavenLocal()

        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url = 'https://jitpack.io' } // Allows annotations past Java 8 to be used
    }

    dependencies {
        compile group: 'org.ddogleg', name: 'ddogleg', version: '0.19'

        compileOnly 'org.jetbrains:annotations:20.0.0' // @Nullable
        compileOnly 'javax.annotation:jsr250-api:1.0'  // @Generated
        compileOnly 'org.projectlombok:lombok:1.18.10'
        testCompile project.sourceSets.main.compileClasspath

        testImplementation( 'org.junit.jupiter:junit-jupiter-api:5.4.0')
        testRuntimeOnly( 'org.junit.jupiter:junit-jupiter-engine:5.4.0')

        // needed to use Java 11+ syntax with Java 1.8 byte code
        annotationProcessor('com.github.bsideup.jabel:jabel-javac-plugin:0.2.0'){
            exclude group: 'net.bytebuddy', module: 'byte-buddy'
            exclude group: 'net.bytebuddy', module: 'byte-buddy-agent'
        }
        annotationProcessor("net.bytebuddy:byte-buddy:1.10.10")
        annotationProcessor("net.bytebuddy:byte-buddy-agent:1.10.10")
    }

    sourceSets {
        autogenerate {
            java { srcDir 'autogenerate/java' }
        }
    }

    test {
        ignoreFailures true
        reports.html.enabled = false
    }

    javadoc {
        configure(options) {
            failOnError = false
        }
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    // if Maven central isn't setup in gradle.properties skip all of this
    if( project.hasProperty('ossrhUsername') ) {
        signing {
            sign configurations.archives
        }

        uploadArchives {
            repositories {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }

                    snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }

                    pom.project {
                        name 'DeepBoof'
                        packaging 'pom'
                        // optionally artifactId can be defined here
                        description 'Trainer Agnostic Deep Learning'
                        url 'http://boofcv.org'

                        scm {
                            connection 'scm:git:git://github.com/lessthanoptimal/DeepBoof.git'
                            developerConnection 'scm:git:git://github.com/lessthanoptimal/DeepBoof.git'
                            url 'https://github.com/lessthanoptimal/BoofCV'
                        }

                        licenses {
                            license {
                                name 'The Apache Software License, Version 2.0'
                                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }

                        developers {
                            developer {
                                id 'pabeles'
                                name 'Peter Abeles'
                                email 'peter.abeles@gmail.com'
                            }
                        }
                    }
                }
            }
        }
    }
}

// Disable the creation of jars for distribution.  If you don't do this it will crash
[':modules'].each {String a ->
    project(a) {
        if( project.hasProperty('ossrhUsername') ) {
            signArchives.enabled = false
        }
        sourcesJar.enabled = false
        javadocJar.enabled = false
        jar.enabled = false
        uploadArchives.enabled = false
        install.enabled = false
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.BIN
    gradleVersion = '6.4.1'
}
